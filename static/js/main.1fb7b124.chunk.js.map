{"version":3,"sources":["sections/Background.tsx","sections/LurkBoi.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","createStyles","img","minHeight","minWidth","Background","withStyles","props","console","log","className","classes","children","lurky","height","width","display","imgStyle","axis","React","useMemo","rotation","placement","slide","partialVisibility","isVisible","delay","to","opacity","transform","alt","style","placeSelf","src","App","Typography","variant","color","align","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAGMA,EAASC,YAAa,CAC3BC,IAAK,CACJC,UAAW,QACXC,SAAU,WAgBGC,EATIC,YAAWN,EAAXM,EAAmB,SAACC,GAEtC,OADAC,QAAQC,IAAI,MAEX,yBAAKC,UAAWH,EAAMI,QAAQT,KAC5BK,EAAMK,UAAYL,EAAMK,a,0mBCV5B,IAAMZ,EAASC,YAAa,CAC3BY,MAAO,CACNC,OAAQ,QACRC,MAAO,QACPC,QAAS,UAILC,EAAW,CAChBF,MAAO,OACPD,OAAQ,QAsDMR,cAAWN,EAAXM,EA/CmB,SAACC,GAAmB,IAC7CI,EAAkBJ,EAAlBI,QAASO,EAASX,EAATW,KADmC,EAEfC,IAAMC,SAAQ,WAClD,MAAO,CACG,QAATF,EAAiB,SAAW,OACnB,QAATA,EAAiB,aAAe,WACvB,QAATA,EAAiB,OAAS,SAEzB,CAACA,IARgD,mBAE7CG,EAF6C,KAEnCC,EAFmC,KAExBC,EAFwB,KASpD,OACC,yBAAKb,UAAWC,EAAQE,OACvB,kBAAC,IAAD,CAAkBW,mBAAiB,IACjC,SAAAjB,GAAU,IACFkB,EAAclB,EAAdkB,UACR,OACC,kBAAC,SAAD,CACCC,MAAO,IACPC,GAAI,CACHC,QAASH,EAAY,EAAI,EACzBI,UAAWJ,EAAS,+BACOJ,EADP,0BAEHE,EAFG,oBAEcF,EAFd,QAKpB,SAAAd,GAAU,IACFqB,EAAuBrB,EAAvBqB,QAASC,EAActB,EAAdsB,UACjB,OACC,yBACCC,IAAI,SACJC,MAAK,KACDd,EADC,CAEJW,UACAC,YACAG,UAAWV,IAEZW,IAAI,wHC3CCC,EAZY,SAAC3B,GAC3B,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAASW,KAAK,QACd,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,cAAcC,MAAM,UAAnD,cAGA,kBAAC,EAAD,CAASpB,KAAK,aCCGqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1fb7b124.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withStyles, createStyles } from \"@material-ui/styles\";\r\n\r\nconst styles = createStyles({\r\n\timg: {\r\n\t\tminHeight: \"100vh\",\r\n\t\tminWidth: \"100vw\",\r\n/* \t\tbackgroundImage:\r\n\t\t\t'url(\"https://res.cloudinary.com/teepublic/image/private/s--YlpQt0rM--/t_Preview/b_rgb:ffffff,c_limit,f_auto,h_313,q_90,w_313/v1448664128/production/designs/345116_1\")',\r\n\t\tbackgroundRepeat: \"repeat\" */\r\n\t}\r\n});\r\n\r\nconst Background = withStyles(styles)((props: any) => {\r\n\tconsole.log(\"hi\");\r\n\treturn (\r\n\t\t<div className={props.classes.img}>\r\n\t\t\t{props.children && props.children}\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default Background;\r\n","import React from \"react\";\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { Spring } from \"react-spring/renderprops\";\r\nimport { createStyles } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport classnames from \"classnames\";\r\n\r\nconst styles = createStyles({\r\n\tlurky: {\r\n\t\theight: \"100vh\",\r\n\t\twidth: \"100vw\",\r\n\t\tdisplay: \"flex\"\r\n\t}\r\n});\r\n\r\nconst imgStyle = {\r\n\twidth: \"100%\",\r\n\theight: \"auto\"\r\n};\r\n\r\ninterface IProps {\r\n\taxis: \"top\" | \"bottom\";\r\n\tclasses?: any;\r\n}\r\nconst LurkBoi: React.FC<IProps> = (props: IProps) => {\r\n\tconst { classes, axis } = props;\r\n\tconst [rotation, placement, slide] = React.useMemo(() => {\r\n\t\treturn [\r\n\t\t\taxis === \"top\" ? \"180deg\" : \"0deg\",\r\n\t\t\taxis === \"top\" ? \"flex-start\" : \"flex-end\",\r\n\t\t\taxis === \"top\" ? \"-25%\" : \"25%\"\r\n\t\t];\r\n\t}, [axis]);\r\n\treturn (\r\n\t\t<div className={classes.lurky}>\r\n\t\t\t<VisibilitySensor partialVisibility>\r\n\t\t\t\t{props => {\r\n\t\t\t\t\tconst { isVisible } = props;\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Spring\r\n\t\t\t\t\t\t\tdelay={500}\r\n\t\t\t\t\t\t\tto={{\r\n\t\t\t\t\t\t\t\topacity: isVisible ? 1 : 0,\r\n\t\t\t\t\t\t\t\ttransform: isVisible\r\n\t\t\t\t\t\t\t\t\t? `translateY(0) rotate(${rotation})`\r\n\t\t\t\t\t\t\t\t\t: `translateY(${slide}) rotate(${rotation})`\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{props => {\r\n\t\t\t\t\t\t\t\tconst { opacity, transform } = props;\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\talt=\"punpun\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t...imgStyle,\r\n\t\t\t\t\t\t\t\t\t\t\topacity,\r\n\t\t\t\t\t\t\t\t\t\t\ttransform,\r\n\t\t\t\t\t\t\t\t\t\t\tplaceSelf: placement\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tsrc=\"https://vignette3.wikia.nocookie.net/punpun/images/5/50/Wiki-background/revision/latest?cb=20150310190809\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t</Spring>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</VisibilitySensor>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default withStyles(styles)(LurkBoi);\r\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Background, LurkBoi } from \"./sections\";\n\nconst App: React.FC<any> = (props: any) => {\n\treturn (\n\t\t<Background>\n\t\t\t<LurkBoi axis=\"top\" />\n\t\t\t<Typography variant=\"h4\" color=\"textPrimary\" align=\"center\">\n\t\t\t\tBIG SKROLL\n\t\t\t</Typography>\n\t\t\t<LurkBoi axis=\"bottom\" />\n\t\t</Background>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}