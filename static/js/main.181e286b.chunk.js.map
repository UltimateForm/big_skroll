{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","createStyles","img","height","width","position","backgroundImage","backgroundRepeat","centered","display","alignItems","justifyContent","flexDirection","fullViewport","withStyles","props","classes","h2Style","fontSize","className","classnames","partialVisibility","isVisible","delay","to","opacity","transform","alt","style","src","Typography","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+1BAQA,IAAMA,EAASC,YAAa,CAC3BC,IAAK,CACJC,OAAQ,QACRC,MAAO,OACPC,SAAU,QACVC,gBACC,yKACDC,iBAAkB,UAEnBC,SAAU,CACTH,SAAU,WACVI,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,cAAe,SACfT,OAAQ,SAETU,aAAc,CACbV,OAAQ,WAuFKW,cAAWd,EAAXc,EAnFY,SAACC,GAAgB,IACnCC,EAAYD,EAAZC,QACFC,EAAU,CACfC,SAAU,QAEX,OACC,6BACC,yBAAKC,UAAWH,EAAQd,MACxB,yBAAKiB,UAAWC,IAAWJ,EAAQR,SAAUQ,EAAQH,eACpD,kBAAC,IAAD,CAAkBQ,mBAAiB,IACjC,SAAAN,GAAU,IACFO,EAAcP,EAAdO,UACR,OACC,kBAAC,SAAD,CACCC,MAAO,IACPC,GAAI,CACHC,QAASH,EAAY,EAAI,EACzBI,UAAWJ,EACR,+BACA,uCAGH,SAAAP,GAAU,IACFU,EAAuBV,EAAvBU,QAASC,EAAcX,EAAdW,UACjB,OACC,yBACCC,IAAI,SACJC,MAAK,KACDX,EADC,CAEJQ,UACAC,cAEDG,IAAI,qHASZ,yBAAKV,UAAWC,IAAWJ,EAAQR,SAAUQ,EAAQH,eACpD,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,eAA/B,eAID,yBAAKb,UAAWC,IAAWJ,EAAQR,SAAUQ,EAAQH,eACpD,kBAAC,IAAD,CAAkBQ,mBAAiB,IACjC,SAAAN,GAAU,IACFO,EAAcP,EAAdO,UACR,OACC,kBAAC,SAAD,CACCC,MAAO,IACPC,GAAI,CACHC,QAASH,EAAY,EAAI,EACzBI,UAAWJ,EACR,gBACA,uBAGH,SAAAP,GAAU,IACFU,EAAuBV,EAAvBU,QAASC,EAAcX,EAAdW,UACjB,OACC,yBACCC,IAAI,SACJC,MAAK,KACDX,EADC,CAEJQ,UACAC,cAEDG,IAAI,yHCxFKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.181e286b.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport { Spring } from \"react-spring/renderprops\";\nimport VisibilitySensor from \"react-visibility-sensor\";\nimport { createStyles, withStyles } from \"@material-ui/styles\";\nimport classnames from \"classnames\";\nimport { Typography, Paper, Card, CardMedia } from \"@material-ui/core\";\n\nconst styles = createStyles({\n\timg: {\n\t\theight: \"100vh\",\n\t\twidth: \"100%\",\n\t\tposition: \"fixed\",\n\t\tbackgroundImage:\n\t\t\t'url(\"https://res.cloudinary.com/teepublic/image/private/s--YlpQt0rM--/t_Preview/b_rgb:ffffff,c_limit,f_auto,h_313,q_90,w_313/v1448664128/production/designs/345116_1\")',\n\t\tbackgroundRepeat: \"repeat\"\n\t},\n\tcentered: {\n\t\tposition: \"relative\",\n\t\tdisplay: \"flex\",\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t\tflexDirection: \"column\",\n\t\theight: \"100vh\"\n\t},\n\tfullViewport: {\n\t\theight: \"100vh\"\n\t},\n});\n\nconst App: React.FC<any> = (props: any) => {\n\tconst { classes } = props;\n\tconst h2Style = {\n\t\tfontSize: \"82px\"\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<div className={classes.img} />\n\t\t\t<div className={classnames(classes.centered, classes.fullViewport)}>\n\t\t\t\t<VisibilitySensor partialVisibility>\n\t\t\t\t\t{props => {\n\t\t\t\t\t\tconst { isVisible } = props;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Spring\n\t\t\t\t\t\t\t\tdelay={500}\n\t\t\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\t\t\topacity: isVisible ? 1 : 0,\n\t\t\t\t\t\t\t\t\ttransform: isVisible\n\t\t\t\t\t\t\t\t\t\t? \"translateY(0) rotate(180deg)\"\n\t\t\t\t\t\t\t\t\t\t: \"translateY(-600px) rotate(180deg)\"\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{props => {\n\t\t\t\t\t\t\t\t\tconst { opacity, transform } = props;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\talt=\"punpun\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t...h2Style,\n\t\t\t\t\t\t\t\t\t\t\t\topacity,\n\t\t\t\t\t\t\t\t\t\t\t\ttransform\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://vignette3.wikia.nocookie.net/punpun/images/5/50/Wiki-background/revision/latest?cb=20150310190809\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t</Spring>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t</VisibilitySensor>\n\t\t\t</div>\n\t\t\t<div className={classnames(classes.centered, classes.fullViewport)}>\n\t\t\t\t<Typography variant=\"h4\" color=\"textPrimary\">\n\t\t\t\t\tBIG SKROLL\n\t\t\t\t</Typography>\n\t\t\t</div>\n\t\t\t<div className={classnames(classes.centered, classes.fullViewport)}>\n\t\t\t\t<VisibilitySensor partialVisibility>\n\t\t\t\t\t{props => {\n\t\t\t\t\t\tconst { isVisible } = props;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Spring\n\t\t\t\t\t\t\t\tdelay={500}\n\t\t\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\t\t\topacity: isVisible ? 1 : 0,\n\t\t\t\t\t\t\t\t\ttransform: isVisible\n\t\t\t\t\t\t\t\t\t\t? \"translateY(0)\"\n\t\t\t\t\t\t\t\t\t\t: \"translateY(600px)\"\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{props => {\n\t\t\t\t\t\t\t\t\tconst { opacity, transform } = props;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\talt=\"punpun\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t...h2Style,\n\t\t\t\t\t\t\t\t\t\t\t\topacity,\n\t\t\t\t\t\t\t\t\t\t\t\ttransform\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://vignette3.wikia.nocookie.net/punpun/images/5/50/Wiki-background/revision/latest?cb=20150310190809\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t</Spring>\n\t\t\t\t\t\t);\n\t\t\t\t\t}}\n\t\t\t\t</VisibilitySensor>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}